// Code generated by go-bindata.
// sources:
// data/customers.json
// data/locations.json
// data/profiles.json
// data/rates.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCustomersJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\xe6\x52\x00\x82\x6a\x30\x09\x02\x4a\x99\x29\x4a\x56\x0a\x86\x3a\x08\x81\xc4\xd2\x92\x8c\x90\xfc\xec\xd4\x3c\xa0\xb8\x52\x98\xa3\x8f\xa7\x4b\x7c\x88\xbf\xb7\xab\x9f\x12\x58\x49\x2d\x57\x2c\x17\x20\x00\x00\xff\xff\x2b\x28\xf3\x0d\x44\x00\x00\x00")

func dataCustomersJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataCustomersJson,
		"data/customers.json",
	)
}

func dataCustomersJson() (*asset, error) {
	bytes, err := dataCustomersJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/customers.json", size: 68, mode: os.FileMode(384), modTime: time.Unix(1440605599, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataLocationsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\xd2\xb1\x0a\xc2\x30\x10\x06\xe0\xbd\x4f\x51\x3a\x57\xc8\xe5\x2e\xc9\x9d\x6f\xe0\x33\x88\x83\xd0\xa2\x85\xd2\x3a\xc4\x49\xfa\xee\x9e\x15\xad\x8b\x95\x5b\xbc\xa1\x94\x3f\x7f\xe0\x0b\xc9\xbe\x28\x75\x6e\xf3\xf7\x31\xd5\x79\xcc\x6d\xbf\x6b\xaa\x6d\x09\xf5\x92\x5e\xc6\x6e\xc8\x9a\x2d\xc5\x39\xee\x8f\xb9\xcb\xd7\xa6\xd5\x15\x72\x89\x91\x31\x7c\xec\x7a\x56\xc6\xe1\xf4\xea\x6c\x12\x45\x20\x4c\x11\xdf\x9d\x69\xfe\x9b\xea\xef\x0c\x6f\x64\x30\x78\xcf\x8e\xd7\x19\x28\x22\x90\xc4\xc0\x40\x1b\x03\x30\x7a\x86\x10\xd7\x19\xe2\x20\x50\x64\x03\x83\x8c\x0c\x3d\xa7\x04\xa2\x75\x86\xc3\x04\x0a\x36\x30\x82\x91\x41\xce\xe9\xeb\x90\x5f\x97\x12\xc0\x4b\x32\x30\xe2\x1f\x19\xc5\xa1\xb8\x07\x00\x00\xff\xff\xeb\xea\xd5\x98\x2d\x03\x00\x00")

func dataLocationsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataLocationsJson,
		"data/locations.json",
	)
}

func dataLocationsJson() (*asset, error) {
	bytes, err := dataLocationsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/locations.json", size: 813, mode: os.FileMode(384), modTime: time.Unix(1440605599, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataProfilesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\xdd\x6e\x2b\x35\x10\xbe\xef\x53\x8c\x72\x05\x52\xb6\x4a\xb2\xbb\x6d\xc2\x5d\xd2\x43\x7b\x90\x08\xaa\x4e\x02\x08\x10\x17\xb3\xf6\x24\x6b\xea\xb5\x83\xed\x3d\x39\x11\x3a\x12\xaf\xc1\xeb\xf1\x24\x8c\x37\x29\x49\xdb\xfc\x94\x5c\x95\x5c\x54\xdd\xf5\xec\x78\x3c\xdf\xe7\x6f\xbe\x5f\x2e\x80\x7f\x7f\x34\x7f\xe3\xaf\xa5\x64\xeb\x2b\xe8\xb6\xb7\x2f\x0c\x56\xc4\xaf\x5a\x37\x5a\xcd\x02\xbc\xb7\x81\x74\x6b\x67\x79\x51\x5a\x43\xdf\xd5\x55\x41\x2e\x46\x7d\x91\x75\xf3\x2f\xe1\xfa\x3a\x4f\xb2\xeb\x4e\x67\x37\x50\x92\x17\x4e\x2d\x82\xb2\x26\x06\x0e\xe1\x2a\xa9\x94\xa9\x03\xc1\x12\xf5\x03\xcc\x9c\xad\xe0\x7b\xc3\xab\x30\xf9\xbd\x46\x47\x80\x46\x42\x06\xeb\x18\xbf\x5e\x47\x18\xd7\x46\xc1\x98\x82\xb3\xe0\x03\xc6\x64\x6d\x08\xa5\xf2\xa0\xeb\x4f\xb5\x5b\x41\x19\xeb\x03\xde\x4b\xcd\x0d\x49\x28\x56\x70\x5f\x2a\xad\x16\x0b\x82\x49\x40\x27\x78\x23\xc2\x50\x3b\xce\x88\x06\xd0\x05\xbf\x82\x59\xed\x8c\x8a\xef\x40\x58\xad\x49\xc4\xac\xa0\x0c\xe7\x25\xd0\xb6\x28\x56\x6d\x7e\x12\xba\x96\xca\xcc\x61\x69\xdd\x43\x4c\x3b\x41\xfd\x11\xa5\x75\xf0\x0e\xb5\xba\xdc\x3d\x28\x4a\xc9\xe9\x3d\x1f\x72\xdb\xd6\x66\xc1\x07\x47\x14\xb6\xbd\xca\x06\xf9\xce\x77\xbb\x21\x9b\x96\xdf\x11\xf2\x91\x26\xe1\x79\x94\x50\x61\x15\xd7\x27\x7c\x84\x5b\x87\x46\x28\x2f\xec\xcb\x54\x18\xd6\xc0\x0d\x5f\x7c\x6f\x6b\x13\x5c\x93\x82\x3b\x1e\xb8\x4f\x93\x18\xec\x9f\xc7\x2d\x2c\x27\xd1\x37\x56\x36\x79\x06\x59\xb7\xd3\x6b\xfd\x1b\xf1\xb9\xf9\xef\x73\x7b\x2f\x81\x7a\x7b\x08\xf4\x23\x1c\xaa\xf7\x10\x89\xae\x93\x3c\x3d\x4a\xa2\x6f\xb9\xcf\x0c\x53\x44\x12\x0a\x6d\xc5\x86\x46\x11\xb8\x9f\xc8\x15\x08\xa3\x9a\x0c\xc2\x0d\x99\x40\x0e\x66\x8c\x56\x5c\x1a\x32\xea\x1b\xd6\x70\xbb\x8d\x7c\x64\x0d\x3f\x23\x74\x7b\xc7\x69\x79\x1e\xd4\xdd\x7e\xf7\x38\xd4\xa9\x93\x6f\x0a\xe8\xf4\x95\x40\xa7\x7b\x80\x6e\x34\x02\x7e\xa6\x10\xf0\x24\xc8\x79\x96\x26\xfd\x3c\xcf\x8f\x2a\x45\xfa\x12\x92\x88\xe3\xbd\x5d\x92\xd6\x7c\xa4\xd8\x48\x10\x58\x68\x4a\x04\x32\xc6\x7c\x9f\xd1\xf1\xd1\x65\xa3\x21\xa3\xe1\x87\x29\x38\x54\xfa\x99\x62\x94\x6a\xb1\x01\x7e\xf0\x54\x65\x9e\xa8\x90\xb0\x55\xa1\x0c\xc5\xf0\x79\x99\x04\x12\x25\x6b\x82\x9c\x37\x52\xa0\x42\xb9\x91\x90\x60\x6b\x51\x92\x3f\x8f\x1c\xf9\x09\x19\xc8\x79\x9b\xff\x23\x37\xb2\x83\xdc\xf8\x41\x71\x4a\x3a\x49\x8e\xde\x75\x3f\x49\x8f\x8f\x91\x69\x44\x72\xc9\x75\x3b\x86\xce\x84\x0d\xa0\x0d\x32\x23\x5c\xc1\xc8\x29\x39\x27\xf8\xa8\x68\xe9\xe3\xfd\x4e\xd7\x32\xe1\xb7\x24\xba\x55\x26\xf6\x0e\x35\xbc\x53\xdc\x76\x25\x42\x43\x1a\x84\x6c\x3f\xe9\x6e\xc9\xb1\x26\x8f\x6a\xa5\xe3\x38\x38\x0f\xf0\xfe\x71\xbc\xc7\xca\xfb\x86\x81\x6f\x08\xf3\xfc\x95\x98\xe7\x7b\x30\xbf\x2f\x2d\x19\xf5\xe9\xd5\xde\xe1\x2a\xe9\xa6\xfd\xa3\xb2\x6f\x05\xc6\xe2\x37\x33\x7a\xca\x1a\x4e\x4e\x5b\x7e\x34\xc4\xb7\xb4\xb0\xae\xb4\x56\xb6\xa3\x9a\x77\x5e\xa2\x88\x07\x15\xc1\x35\xbe\xa2\xb2\x81\x07\x45\xbc\xe4\x04\x25\xf2\xc5\xe7\x66\xf0\x66\x15\x9a\x15\xb8\x38\x63\xaa\xda\x2b\x66\x8c\xf1\x0d\x53\x2c\x97\xe0\x40\x90\xa6\xc2\xa9\xa0\x58\x29\x3c\xbb\x05\x6a\x2a\xeb\x0e\xf2\x8e\xbf\x84\x6f\xc2\xdf\x7f\xfe\xe5\x0f\x73\x8a\xf7\xe6\x2d\x95\x80\x3b\xc7\xe6\x04\x86\x15\xf1\x03\x43\x3c\x8e\x1b\xc1\x7b\x64\x91\x33\x7c\xae\xc0\x1e\xa4\x38\x8f\x71\x57\x9d\x13\xf3\xe7\x6b\x29\xdf\x96\xd3\x18\xb4\x2e\x5e\xc7\xb8\xab\x3d\x8c\x9b\x96\xd1\xee\x5d\xc2\x07\x9a\x33\xac\xff\xcd\x76\xf4\xfa\x59\x92\x75\x8e\x8a\xce\x36\x35\x23\x44\x75\x05\x53\x9e\x44\x6e\xed\x1f\xb2\x5e\x12\xc1\x64\xcf\x98\xf5\x33\x60\xc7\xec\x1f\x56\xfc\x31\x2e\x62\xc0\x9a\xaf\x13\x5b\xb3\x3c\xd9\x19\x8c\xd1\x3d\xf0\xe4\x92\x8f\xc2\xc3\xaf\x9e\xd4\xda\x86\x1b\x36\x97\x6c\x5b\x8c\x42\x66\xb3\xfc\x0d\x05\x3b\x19\x1e\x36\x4f\xdc\xcd\x1d\x3a\x49\x86\x1d\xcd\xd8\xf2\x37\x86\x36\x76\xa7\x0d\xf7\x28\x46\x71\x40\x3e\x8a\x55\x43\xd7\xa6\x80\xdd\x4d\x1e\xcf\x10\xeb\xe1\xfe\x3b\x13\xfd\xd1\x99\x2e\xa7\x77\x62\x92\xb1\xcb\x79\x53\x0c\x7b\x46\xb0\x8b\x5f\x2f\xfe\x09\x00\x00\xff\xff\x1a\xca\x86\x80\x10\x0d\x00\x00")

func dataProfilesJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataProfilesJson,
		"data/profiles.json",
	)
}

func dataProfilesJson() (*asset, error) {
	bytes, err := dataProfilesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/profiles.json", size: 3344, mode: os.FileMode(384), modTime: time.Unix(1440605599, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataRatesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\xe6\x52\x00\x82\x6a\x30\x09\x02\x4a\x19\xf9\x25\xa9\x39\x9e\x29\x4a\x56\x0a\x86\x3a\x08\xd1\xe4\xfc\x94\x54\xa0\x90\x52\x90\xa3\xb3\xb7\x12\x92\x78\x66\x9e\x4b\x62\x09\x58\xc6\xc8\xc0\xd0\x54\xd7\xc0\x44\xd7\xc0\x12\x59\x3e\xbf\xb4\x04\x5d\x81\xa1\x01\xb2\x82\xa2\xfc\xfc\xdc\x90\xca\x02\x90\x0a\x84\x23\x80\xe2\x49\xf9\xf9\xd9\x89\x49\x39\xa9\x41\x10\xdd\x86\x06\x96\x7a\x06\x06\x3a\xc8\x2a\x60\x4e\xf2\xf6\x73\x57\x42\x91\x48\x49\x2d\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\x03\xcb\x67\xe6\xa5\x2b\x14\x67\x56\xa5\xa6\x28\x24\xa5\xa6\xa0\x2a\x2d\xc9\x2f\x49\xcc\xc1\x6d\x05\x5c\xda\x33\x2f\x39\xa7\xb4\x38\xb3\x0c\xac\xce\xc8\x58\xcf\xd0\x1c\xae\xac\x96\x0b\x42\xc6\x72\x01\x02\x00\x00\xff\xff\x60\x68\x85\xcb\x4b\x01\x00\x00")

func dataRatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataRatesJson,
		"data/rates.json",
	)
}

func dataRatesJson() (*asset, error) {
	bytes, err := dataRatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/rates.json", size: 331, mode: os.FileMode(384), modTime: time.Unix(1440605599, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/customers.json": dataCustomersJson,
	"data/locations.json": dataLocationsJson,
	"data/profiles.json": dataProfilesJson,
	"data/rates.json": dataRatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"customers.json": &bintree{dataCustomersJson, map[string]*bintree{
		}},
		"locations.json": &bintree{dataLocationsJson, map[string]*bintree{
		}},
		"profiles.json": &bintree{dataProfilesJson, map[string]*bintree{
		}},
		"rates.json": &bintree{dataRatesJson, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

