// Code generated by go-bindata.
// sources:
// data/geo.json
// data/hotels.json
// data/inventory.json
// data/locales.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGeoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\x50\x50\xa8\x06\x93\x20\xa0\x94\x91\x5f\x92\x9a\xe3\x99\xa2\x64\xa5\xa0\x64\xa8\xa4\x83\x10\xcf\x49\x2c\x51\xb2\x52\x30\x36\xd7\x33\xb7\x30\x33\x47\x16\xcf\xcf\x53\xb2\x52\xd0\x35\x34\x32\xd2\x33\x31\x34\x34\x02\x4b\xd4\xea\xe0\x31\xd5\x08\x87\xa9\xa6\x26\x38\x4c\x35\x30\x30\x25\x6c\xaa\x31\x0e\x53\x8d\x71\x9a\x6a\x6e\x48\xd8\x54\x13\xec\xa6\x5a\x1a\x9b\x61\x37\xd5\xd8\xd2\xd8\x80\xb0\xa9\xa6\xb8\xdc\x6a\x88\x2b\x5c\x2d\x88\x70\xab\x19\xae\xd8\x32\xc6\x15\x02\x86\xd0\x70\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\xc2\xb0\xd9\xce\x07\x02\x00\x00")

func dataGeoJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataGeoJson,
		"data/geo.json",
	)
}

func dataGeoJson() (*asset, error) {
	bytes, err := dataGeoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/geo.json", size: 519, mode: os.FileMode(420), modTime: time.Unix(1502238721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHotelsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x96\xcd\x6e\x23\x45\x10\xc7\xef\xfb\x14\xa5\x9c\x40\xb2\x23\x8f\x67\xc6\x1f\x7b\x4b\xb2\xec\x2e\x12\x46\xd1\x3a\x0b\x02\xc4\xa1\xdc\x5d\xf6\x14\x69\x77\x9b\xea\x9a\xcd\x5a\x68\x25\x5e\x83\xd7\xe3\x49\x50\x8f\x1d\xe2\xc4\xf6\x24\xe4\x14\x72\x88\xac\xae\x9a\xea\x8f\xfa\xe9\x5f\xff\x5f\x5e\x01\x00\xfc\xd1\xfc\x4f\x7f\x27\x6c\x4f\x5e\xc3\x49\x76\xd2\xb9\x5b\xf2\xb8\xa4\xb4\x78\xe1\x78\xae\xf0\x3e\x28\xb9\xdd\xf0\xaa\x0a\x9e\xbe\xaf\x97\x33\x92\x94\xf5\x55\x91\x95\x5f\xc3\x70\x58\x76\x8b\x61\xaf\xb7\x9b\x68\x29\x1a\xe1\x95\x72\xf0\x29\xf1\x0c\x06\xdd\x25\xfb\x5a\x09\x6e\xd0\x5d\xc3\x5c\xc2\x12\x3e\x7a\x0e\x1e\xa6\xbf\xd7\x28\x04\xe8\x2d\x14\xb0\xc9\x89\x9b\x38\xc2\xa4\xf6\x0c\x13\x52\x09\x10\x15\x53\xb1\x0e\x68\xc5\x11\x5c\xfd\xb9\x96\x35\x54\xe9\x7c\x60\x29\xf2\xc2\x93\x85\xd9\x1a\x2e\x2b\x76\xbc\x5a\x11\x4c\x15\xc5\x5c\xc3\x9c\x50\x6b\xa1\x08\xe8\x01\x45\xe3\x1a\xe6\xb5\x78\x4e\x6b\x60\x82\x73\x64\x52\x55\x60\x0f\x5a\x11\xb8\x30\x9b\xad\x3b\xc0\xde\xb8\xda\xb2\x5f\xc0\x4d\x90\xeb\x54\x76\x8a\xee\x13\xda\x20\xf0\x06\x1d\x9f\xee\x5e\x14\xad\x15\x8a\xf1\xe4\xf5\xce\xc3\x36\x81\xa8\x42\xa4\x77\x6f\x55\x8c\xcb\x9d\xef\x76\x53\xb6\x4f\xfe\x8e\x50\xd6\x30\xd5\x87\x59\x86\x75\x9d\xe2\x53\xf4\xf0\x56\xd0\x1b\x8e\x26\xec\x97\x42\xdd\x34\xee\x6c\xef\xfb\x50\x7b\x95\xa6\xc4\x47\xcf\x4a\x36\xbd\x8d\x52\x7c\x98\xb7\x0a\x51\xd1\x5d\x04\xdb\xd4\x19\x17\x59\xaf\xff\x30\xc5\xa1\x9e\xbc\x86\x7c\x78\x3a\x1c\x0d\x86\x0f\x63\x4d\xa7\xbb\x59\xbf\x7f\x5a\x64\x59\xff\xdf\xe0\x97\xe6\xd7\x97\xce\x61\xf8\xfa\x87\xe0\xfb\x11\x8e\xdd\xf5\x18\x80\xc3\x6e\x99\xb7\x02\xf8\x1d\xc5\x08\x5a\x25\x0a\x60\xe6\x82\xd9\x22\x98\x9a\xfe\x13\xc9\x0c\xe1\xbc\x26\x8f\x70\x41\x5e\x49\x60\x1e\xa4\x09\x9d\x89\xc6\x2d\x71\x2a\xe4\xed\x2d\x71\x1c\x01\x21\xeb\xb7\x23\xfd\x3c\x4c\xb2\x51\xd6\x8e\x49\x2e\xf6\x45\x41\x92\xb7\x40\x52\x16\x2d\x90\xf4\x7a\xe5\x13\x21\xc9\x0f\x41\xd2\x68\x13\xfc\x4c\xaa\xf8\x28\x20\x65\x91\x77\x47\x65\x59\xb6\x2a\x54\xbe\xdf\xce\xc4\xc0\x65\xb8\x21\xe7\x60\xda\x34\x01\x0c\xce\x1c\x75\x0d\x0a\x68\x2d\x1e\x25\xd4\xde\x36\xda\x75\x7e\xf6\xe1\x0a\x04\xd9\x3d\x50\xaa\x8a\x57\x5b\x68\xc6\xf7\xd5\xed\x9e\xfa\x99\xb0\x9c\xb1\xa7\x94\xbe\xa8\xba\x4a\xa6\x02\x17\xec\xa2\x91\x20\xd6\x6a\x2b\x5d\x1a\x6a\x53\x51\x7c\x1e\x58\xe5\x23\xf2\x53\x6a\xf5\xbf\xe1\x2a\x6f\xe5\x6a\x98\x3d\x91\xab\xe2\x38\x57\x3f\xb0\xa2\xa3\x47\xc1\xea\x0f\x47\xdd\xbc\x7d\xf4\x5d\x25\x0a\x6e\x50\x49\xe6\x12\xbc\x6e\x61\x68\xba\x7a\x8e\x6b\x38\x17\xb6\x0b\x82\x4f\x4c\x37\x31\xe9\x4a\xbe\x91\xa7\x78\x07\xe0\x5b\xf6\xe9\xdd\xd1\xc1\x1b\x8e\x2a\x6c\xb4\x01\x0e\xa1\x38\x0c\xec\x5b\x12\x59\xc3\x79\xcd\x2e\x8d\xb0\xe7\xc1\x32\x6a\x67\x65\xc2\x31\x36\xf4\xbe\x20\x5e\xf6\xf0\xbe\xe3\x65\x9c\x0f\x8e\xf3\x92\x8f\xf3\xde\x13\x79\x29\x0f\xf1\x72\x59\x05\xf2\xfc\xf9\xc9\x5e\x69\xd0\xcd\xf2\x51\xeb\xa8\x0a\x06\xd3\xc5\xb7\x9e\xe4\x8a\xbc\x25\x71\x81\x3d\x78\xe2\x45\x35\x0b\x52\x85\x60\x3b\x69\x02\xf5\xf6\x09\xc0\xa3\x4a\x24\x8d\x8f\x5a\x06\x0d\xd2\x88\x0b\x41\x85\x11\xaa\x10\xd3\x66\x4b\xf4\x6b\x90\x34\x17\x97\x75\x64\xc3\xe8\x63\x43\x59\xd0\x8a\x04\x0c\x39\x9a\x09\x2b\x53\x84\xc8\xde\x50\x73\xb2\x6c\x5c\xf6\xe2\x29\x7c\xab\x7f\xff\xf9\x57\x3c\xce\x63\xc5\x51\x83\xb0\x81\x77\x42\xa8\x70\xb6\x24\x61\x83\x1e\x26\x69\x23\x78\x8f\xce\x81\xe7\x45\xa5\xc6\xd5\xb3\xe7\xd1\x3a\xe8\x3d\x32\x33\xbf\xb1\xf6\x65\x39\xab\x71\x9b\xb8\x65\x6d\xce\x6a\xf4\x54\x71\x1b\x1c\x82\x75\xaa\xa7\xf0\x81\x16\x1c\xff\xa3\xc3\xea\x8f\x8a\x6e\xd1\x6b\xd5\xb9\xbb\xd2\x93\x3a\x52\xbd\x84\xab\x70\x43\xb2\xb1\x4a\x45\xbf\x9b\x18\x58\x77\xa0\x18\x15\x30\x57\x88\xd7\xeb\x68\x04\x57\x29\x61\x83\xf9\x34\xd4\x5a\x41\x98\xc3\x04\xe5\x9a\x14\xec\xad\xd6\x85\xf9\xfd\xb3\x76\xe0\x02\x1d\xcf\x83\x78\xc6\x0e\xa0\xfd\x0d\x0d\x79\x05\x0d\xf7\x8c\xdc\x3b\x14\x4b\x3e\x76\x60\x12\xa2\x09\x9e\xb6\xce\xae\x03\x97\x68\xce\xd3\x3c\xbf\xd5\xc7\x86\xf2\xe6\x00\xbb\x9b\xdc\xde\x21\x9d\x27\x58\x12\x9f\xac\xe0\x33\x0d\x5d\xff\x91\xc1\xfb\xd2\x0c\x5d\x1b\x9b\x83\xbc\x6d\xf0\x66\x7b\x86\xee\xd5\xaf\xaf\xfe\x09\x00\x00\xff\xff\xd4\xa1\x82\xaf\x76\x0e\x00\x00")

func dataHotelsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataHotelsJson,
		"data/hotels.json",
	)
}

func dataHotelsJson() (*asset, error) {
	bytes, err := dataHotelsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hotels.json", size: 3702, mode: os.FileMode(420), modTime: time.Unix(1502238721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataInventoryJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\x50\x50\xa8\x06\x93\x20\xa0\x94\x91\x5f\x92\x9a\xe3\x99\xa2\x64\xa5\xa0\x64\xa8\xa4\x83\x10\x4f\xce\x4f\x49\x05\x09\x06\x39\x3a\x7b\x23\x8b\x67\xe6\xb9\x24\x96\x80\x65\x8c\x0c\x0c\x4d\x75\x0d\x4c\x74\x0d\x2c\x91\xe5\xf3\x4b\x4b\xd0\x15\x18\x1a\x20\x2b\x28\xca\xcf\xcf\x0d\xa9\x2c\x00\xa9\x40\x38\x43\x41\x41\x29\x29\x3f\x3f\x3b\x31\x29\x27\x35\x08\xa2\xdb\xd0\xc0\x52\xcf\xc0\x40\x07\x59\x05\xcc\x49\xde\x7e\xee\x4a\x28\x12\x29\xa9\xc5\xc9\x45\x99\x05\x25\x99\xf9\x79\x60\xf9\xcc\xbc\x74\x85\xe2\xcc\xaa\xd4\x14\x85\xa4\xd4\x14\x54\xa5\x25\xf9\x25\x89\x39\xb8\xad\x80\x4b\x7b\xe6\x25\xe7\x94\x16\x67\x96\x81\xd5\x19\x19\xeb\x19\x9a\xc3\x95\xd5\x82\x59\xb5\x3a\x78\x42\xd2\x68\x50\x85\xa4\x31\xce\x90\x0c\xf4\xc3\x1b\x90\x81\xa5\xa9\xa9\x79\x44\x85\x24\xa6\x15\xd8\x43\xd2\xd4\x58\xcf\xc0\x92\x94\x90\x34\x1e\x54\x21\x39\xd8\xd3\x24\x57\x2c\x17\x20\x00\x00\xff\xff\x34\xed\xf5\xf8\xe1\x03\x00\x00")

func dataInventoryJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataInventoryJson,
		"data/inventory.json",
	)
}

func dataInventoryJson() (*asset, error) {
	bytes, err := dataInventoryJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/inventory.json", size: 993, mode: os.FileMode(420), modTime: time.Unix(1502245313, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLocalesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x31\x4b\xf4\x40\x10\x86\xfb\xfb\x15\x2f\xa9\xf3\x7d\x20\x88\x85\x9d\x60\x63\x71\x20\x04\x2b\xb1\x98\xec\x4e\x2e\x43\xe6\x66\xe3\xec\xae\x67\x10\xff\xbb\x6c\xae\xd0\x29\xa6\x78\xde\xe1\x61\xde\xd7\x03\x00\x7c\xed\xbb\x4d\x37\xa7\xc2\xfa\x14\xbb\x7b\x74\x37\x5d\xff\xcb\x35\x05\x52\x6e\x98\xed\x2f\x8f\x9c\x83\xcb\x5a\x24\x59\x0b\x1f\x70\xf7\xef\x2c\x56\x0b\xe3\x42\xba\x60\xf2\x74\xc6\x8b\x49\x32\x0c\xef\x95\x9c\x41\x16\x71\x8b\xeb\x4d\xbe\xe6\x84\x63\x35\xc1\x91\x8b\x27\xe4\x42\x4d\xd6\xa3\xcc\x92\xa1\xf5\xb3\xfa\x86\xfd\x2b\x44\xce\x72\x32\x8e\x18\x37\x3c\xcf\xa2\xb2\xae\x8c\xa1\x90\x87\x05\x13\x53\xa9\xce\x19\x64\x20\x2f\x79\xc3\x54\xdd\xa4\x31\x84\xa4\xca\xa1\x59\x21\x86\x32\x33\x34\x8d\xe3\xd6\x43\x2c\x68\x8d\x62\x27\x5c\x92\x2f\x4d\x3b\x90\x7e\x50\x4c\x8e\x47\x52\xf9\xdf\xed\x3d\xbf\x0f\x6f\x87\x9f\x00\x00\x00\xff\xff\x84\x3e\x09\x90\x28\x01\x00\x00")

func dataLocalesJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataLocalesJson,
		"data/locales.json",
	)
}

func dataLocalesJson() (*asset, error) {
	bytes, err := dataLocalesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/locales.json", size: 296, mode: os.FileMode(420), modTime: time.Unix(1502238721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/geo.json": dataGeoJson,
	"data/hotels.json": dataHotelsJson,
	"data/inventory.json": dataInventoryJson,
	"data/locales.json": dataLocalesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"geo.json": &bintree{dataGeoJson, map[string]*bintree{}},
		"hotels.json": &bintree{dataHotelsJson, map[string]*bintree{}},
		"inventory.json": &bintree{dataInventoryJson, map[string]*bintree{}},
		"locales.json": &bintree{dataLocalesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

