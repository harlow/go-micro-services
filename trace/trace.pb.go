// Code generated by protoc-gen-go.
// source: service.trace/proto/trace.proto
// DO NOT EDIT!

/*
Package trace is a generated protocol buffer package.

It is generated from these files:
	service.trace/proto/trace.proto

It has these top-level messages:
	Trace
	Reply
*/
package trace

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Trace struct {
	TraceId   string `protobuf:"bytes,1,opt,name=traceId" json:"traceId,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	From      string `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	To        string `protobuf:"bytes,4,opt,name=to" json:"to,omitempty"`
	Timestamp string `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Duration  string `protobuf:"bytes,6,opt,name=duration" json:"duration,omitempty"`
	FuncCall  string `protobuf:"bytes,7,opt,name=funcCall" json:"funcCall,omitempty"`
}

func (m *Trace) Reset()         { *m = Trace{} }
func (m *Trace) String() string { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()    {}

type Reply struct {
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}

// Client API for Tracer service

type TracerClient interface {
	Track(ctx context.Context, in *Trace, opts ...grpc.CallOption) (*Reply, error)
}

type tracerClient struct {
	cc *grpc.ClientConn
}

func NewTracerClient(cc *grpc.ClientConn) TracerClient {
	return &tracerClient{cc}
}

func (c *tracerClient) Track(ctx context.Context, in *Trace, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/trace.Tracer/Track", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tracer service

type TracerServer interface {
	Track(context.Context, *Trace) (*Reply, error)
}

func RegisterTracerServer(s *grpc.Server, srv TracerServer) {
	s.RegisterService(&_Tracer_serviceDesc, srv)
}

func _Tracer_Track_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Trace)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TracerServer).Track(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Tracer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trace.Tracer",
	HandlerType: (*TracerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Track",
			Handler:    _Tracer_Track_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
